Legend:
[ ] NOT DONE
[*] MAY BE
[-] Look into git history, may be you'll find something about it
Completed items are removed.
============================

[ ] ! Reorganize specs, drop using mockups where it makes little sense
[ ] JSON library dependency: wrong sha256 version when libs changes behavior (draft own ActiveSupport-compatible JSON implementation?)
[*] Fix bad UUID implementation in pure ruby version
[ ] Read/Write benchmarks showing dependency of data size
[-] K-d skiplist & specs
[ ] Get diff strategy from either 'to' or 'from' (as per discussion with oleganza)
[ ] add created_at/updated_at to Document by default? (in addition to lamport ;)
[ ] Pool new UUIDs
[ ] Investigate nested metas issue (View::Cut wasn't possible for some reason)
[ ] Improve tracing references on stack in Document#to_s (I don't like it) 
[ ] Improve PointQuery (I really don't like it)
[ ] Get rid of SkiplistStore.get_new; it doesn't look really nice. May be #initialize should be options-based 
	(and all code needs to be updated), or... don't know, but I really don't like this .get_new
[ ] Add (few?) typical configuration(s) that could be re-used with single line of code
[ ] Possible uniqueness issue: LamportTimestamp has max counter value 2**64. Salt is 64 bit also. (Total timestamp uniqueness is 128 bit.)
[ ] Rename LamportTimestamp to LTS
[ ] Create class method to replace LamportTimestamp.new(x).marshal_load (and don't delete marshal_load, because oleganza utterly needs it)
[-] Finish RangeQuery (we've decided to drop it after ae6371e1f4ffeeb309771b5b6fa1a5233ca4888f)
[ ] Test callbacks using messages (as it was done before). This way we can easily control number of callback calls
[ ] Refactor Meta#document, fix bugs
[ ] Think about non-index named meta lookup
[x] Think more about dropping __version__ as it is in favor of __lamport_timestamp__ (and renaming it to __version__ actually)
[ ] Refactor callback stuff in Document

InvertedList index:

[ ] Optimize prefixes
[ ] Serialize & dump
[ ] Range/set query support
[ ] Faster intersection
[ ] Custom boolean operation on results
[ ] Assoc's indexing
[ ] Sub-attributes indexing

